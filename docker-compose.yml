version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    container_name: ai-mmo-postgres
    environment:
      POSTGRES_DB: ai_mmo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_mmo"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ai-mmo-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO for object storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: ai-mmo-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Ollama for AI models
  ollama:
    image: ollama/ollama:latest
    container_name: ai-mmo-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway / BFF
  gateway:
    build:
      context: .
      dockerfile: apps/gateway/Dockerfile
    container_name: ai-mmo-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_mmo
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGINS=http://localhost:3001
      - GAME_SERVICE_URL=http://game-service:3002
      - WORLDGEN_SERVICE_URL=http://worldgen-service:3003
      - MARKET_SERVICE_URL=http://market-service:3004
      - SOCIAL_SERVICE_URL=http://social-service:3005
      - INTERPRETER_SERVICE_URL=http://interpreter-service:3006
      - NARRATOR_SERVICE_URL=http://narrator-service:3007
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/gateway:/app
      - /app/node_modules
    command: ["pnpm", "dev"]

  # Game State Service
  game-service:
    build:
      context: .
      dockerfile: apps/game-service/Dockerfile
    container_name: ai-mmo-game-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_mmo
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - INTERPRETER_SERVICE_URL=http://interpreter-service:3006
      - NARRATOR_SERVICE_URL=http://narrator-service:3007
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/game-service:/app
      - /app/node_modules
    command: ["pnpm", "dev"]

  # World Generation Service
  worldgen-service:
    build:
      context: .
      dockerfile: apps/worldgen-service/Dockerfile
    container_name: ai-mmo-worldgen-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_mmo
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET=world-content
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./apps/worldgen-service:/app
      - /app/node_modules
    command: ["pnpm", "dev"]

  # Marketplace Service
  market-service:
    build:
      context: .
      dockerfile: apps/market-service/Dockerfile
    container_name: ai-mmo-market-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_mmo
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/market-service:/app
      - /app/node_modules
    command: ["pnpm", "dev"]

  # Social/Chat Service
  social-service:
    build:
      context: .
      dockerfile: apps/social-service/Dockerfile
    container_name: ai-mmo-social-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_mmo
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/social-service:/app
      - /app/node_modules
    command: ["pnpm", "dev"]

  # AI Interpreter Service
  interpreter-service:
    build:
      context: .
      dockerfile: apps/interpreter-service/Dockerfile
    container_name: ai-mmo-interpreter-service
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL_INTERPRETER=llama3:8b-instruct
    depends_on:
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    volumes:
      - ./apps/interpreter-service:/app
      - /app/node_modules
    command: ["pnpm", "dev"]

  # AI Narrator Service
  narrator-service:
    build:
      context: .
      dockerfile: apps/narrator-service/Dockerfile
    container_name: ai-mmo-narrator-service
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=development
      - PORT=3007
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL_NARRATOR=llama3:8b-instruct
    depends_on:
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    volumes:
      - ./apps/narrator-service:/app
      - /app/node_modules
    command: ["pnpm", "dev"]

  # Notification Service (WebSocket hub)
  notifier:
    build:
      context: .
      dockerfile: apps/notifier/Dockerfile
    container_name: ai-mmo-notifier
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=development
      - PORT=3008
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./apps/notifier:/app
      - /app/node_modules
    command: ["pnpm", "dev"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  ollama_data:
    driver: local

networks:
  default:
    name: ai-mmo-network